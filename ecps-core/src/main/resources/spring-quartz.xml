<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
	   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"
>
    <!--后期更改根据情况删除-->
    <!--<context:component-scan base-package="cn.enn.budget.qrtz" />-->
   <!-- <bean id="testService"   class="cn.enn.budget.qrtz.TestService"></bean>-->

    <!--  <bean id="Scheduler"   class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
          <property name="jobFactory" ref="jobFactory" />
      </bean>-->

    <bean id="jobManager" class="cn.itcast.util.qrtz.JobManager"> </bean>
    <!--     <bean id="JobService" class="cn.enn.budget.qrtz.JobService" init-method="loadJobInit"></bean>-->
    <!--后期更改根据情况删除-->


    <!--<import resource="classpath*:spring-mybatis.xml" />-->

    <!--实现动态配置只需定义一下schedulerbean就可以了-->
    <!--<bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSourceQuzrz"
          init-method="init" destroy-method="close">
        &lt;!&ndash; <property name="driverClassName" value="${driverClassName}" /> &ndash;&gt;
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        &lt;!&ndash; 初始化连接大小 &ndash;&gt;
        <property name="initialSize" value="1" />
        &lt;!&ndash; 连接池最大使用连接数量 &ndash;&gt;
        <property name="maxActive" value="20" />
        &lt;!&ndash; 连接池最大空闲  maxIdle是Druid为了方便DBCP用户迁移而增加的，maxIdle是一个混乱的概念。连接池只应该有maxPoolSize和minPoolSize，druid只保留了maxActive和minIdle，分别相当于maxPoolSize和minPoolSize &ndash;&gt;
        &lt;!&ndash; 		<property name="maxIdle" value="20" /> &ndash;&gt;
        &lt;!&ndash; 连接池最小空闲 &ndash;&gt;
        <property name="minIdle" value="1" />
        &lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;
        <property name="maxWait" value="60000" />

        &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
        &lt;!&ndash; mysql不支持
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
         &ndash;&gt;

        <property name="validationQuery" value="${validationQuery}" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />

        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="25200000" />

        &lt;!&ndash; 打开removeAbandoned功能 &ndash;&gt;
        <property name="removeAbandoned" value="true" />
        &lt;!&ndash; 1800秒(30分钟) &ndash;&gt;
        <property name="removeAbandonedTimeout" value="1800" />
        &lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;
        <property name="logAbandoned" value="true" />

        &lt;!&ndash; 监控数据库 &ndash;&gt;
        <property name="filters" value="stat" />
        &lt;!&ndash; <property name="filters" value="mergeStat" /> &ndash;&gt;
    </bean>-->
    

</beans>
<!--
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <import resource="classpath*:spring-mybatis.xml" />
    <bean name="quartzScheduler"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="dataSource">
            <ref bean="dataSource" />
        </property>
        <property name="applicationContextSchedulerContextKey" value="applicationContextKey" />
        <property name="configLocation" value="classpath:quartz.properties" />
        <property name="triggers">
            <list>
                <ref bean="trigger1" />
                <ref bean="trigger2" />
            </list>
        </property>
    </bean>

    <bean id="jobDetail1" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass">
            <value>cn.enn.budget.util.job.MyQuartzJobBean1</value>
        </property>
        <property name="durability" value="true" />
        <property name="requestsRecovery" value="true" />
    </bean>
    <bean id="trigger1" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="jobDetail1" />
        <property name="cronExpression" value="0/30 * * ? * * *" />
    </bean>

    <bean id="jobDetail2" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass">
            <value>cn.enn.budget.util.job.MyQuartzJobBean2</value>
        </property>
        <property name="durability" value="true" />
        <property name="requestsRecovery" value="true" />
    </bean>
    <bean id="trigger2" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="jobDetail2" />
        <property name="cronExpression" value="0/20 * * ? * * *" />
    </bean>

</beans>-->
